@page "/"

@using System.Net.Http.Json
@using OfficeOpenXml
@using SampleBlazorApp.Core.DataTransferObjects
@using SampleBlazorApp.Core.Services

@inject IQuoteService quoteService

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" MaximumFileCount="1" Accept=".xlsx">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context.Id">
            Upload File
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

<MudDataGrid Items="@Quotes">
    <Columns>
        <PropertyColumn Property="x => x.QuoteSentDate" Title="Quote Sent Date">
            <CellTemplate>
                @context.Item.QuoteSentDate.ToString("d")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.SalesPerson" Title="Sales Person" />
        <PropertyColumn Property="x => x.ProjectName" Title="Project Name" />
        <PropertyColumn Property="x => x.ProjectCode" Title="Project Code" />
        <PropertyColumn Property="x => x.Customer" />
        <PropertyColumn Property="x => x.CustomerCity" Title="Customer City" />
        <PropertyColumn Property="x => x.CustomerState" Title="Customer State" />
        <PropertyColumn Property="x => x.MarketingCategory" Title="Marketing Category" />
        <PropertyColumn Property="x => x.NumberOfQuotes" Title="# of Quotes" />
        <PropertyColumn Property="x => x.TotalNet" Title="Total Net" Format="C" />
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<QuoteDto> Quotes = new List<QuoteDto>();

    protected override void OnInitialized()
    {
        Quotes = quoteService.GetQuotes();
    }

    private async Task UploadFile(IBrowserFile file)
    {
        var newQuotes = await GetQuotesFromFile(file);

        quoteService.AddQuotes(newQuotes);

        Quotes = quoteService.GetQuotes();
    }

    private async Task<List<QuoteDto>> GetQuotesFromFile(IBrowserFile file)
    {
        var quotes = new List<QuoteDto>();

        if (file != null && file.Size > 0)
        {
            using (var memoryStream = new MemoryStream())
            {
                // Copy the contents of the file stream to the memory stream synchronously
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0; // Reset the position to the beginning of the stream

                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using (var package = new ExcelPackage(memoryStream))
                {
                    var worksheet = package.Workbook.Worksheets[0];

                    for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                    {
                        var quote = new QuoteDto
                            {
                                QuoteSentDate = worksheet.Cells[row, 1].GetValue<DateTime>(),
                                SalesPerson = worksheet.Cells[row, 2].GetValue<string>(),
                                ProjectName = worksheet.Cells[row, 3].GetValue<string>(),
                                ProjectCode = worksheet.Cells[row, 4].GetValue<string>(),
                                Customer = worksheet.Cells[row, 5].GetValue<string>(),
                                CustomerCity = worksheet.Cells[row, 6].GetValue<string>(),
                                CustomerState = worksheet.Cells[row, 7].GetValue<string>(),
                                MarketingCategory = worksheet.Cells[row, 8].GetValue<string>(),
                                NumberOfQuotes = worksheet.Cells[row, 9].GetValue<int>(),
                                TotalNet = worksheet.Cells[row, 10].GetValue<double>()
                            };

                        quotes.Add(quote);
                    }
                }
            }
        }

        return quotes;
    }
}